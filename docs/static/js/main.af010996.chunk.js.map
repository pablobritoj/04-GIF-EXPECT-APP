{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFethGifs.js","GifExpertApp.js","helpers/handleAdd.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","onFocus","id","type","value","onChange","target","autoComplete","getGifs","category","a","console","log","url","encodeURI","fetch","resp","json","data","gifs","map","img","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","imagenes","loading","state","setstate","useEffect","then","imgs","useFethGifs","GifExpertApp","categories","onClick","valor","document","getElementById","handleAdd","ReactDOM","render"],"mappings":"4LAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,+BAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAmBA,OACI,sBAAMC,SAfW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,GAC5BR,GAAc,SAAAS,GAAI,MAAE,CAACP,MAGrBC,EAAc,KASgBO,QALjB,SAACL,GACdF,EAAc,KAId,SACE,uBACAQ,GAAG,QACHC,KAAK,OACLC,MAAQX,EACRY,SAvBgB,SAACT,GACnBF,EAAcE,EAAEU,OAAOF,QAuBrBG,aAAc,W,8BC/BXC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACnBC,QAAQC,IAAIH,GACNI,EAFa,iDAEoCC,UAAWL,GAF/C,+DAGAM,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GACnB,MAAO,CACPnB,GAAImB,EAAInB,GACRoB,MAAOD,EAAIC,MACXT,IAAKQ,EAAIE,OAAOC,iBAAiBX,QAVlB,kBAgBZM,GAhBY,4CAAH,sDCCPM,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOT,EAAS,EAATA,IAEhC,OACI,sBAAKa,UAAU,OAAf,UACI,qBACAC,IAAKd,EACLe,IAAKN,EACLI,UAAU,WAEV,4BAAIJ,QCNHO,EAAU,SAAC,GAAgB,IAAfpB,EAAc,EAAdA,SAGRqB,ECLU,SAACrB,GACxB,MAA0BjB,mBAAS,CAC/B0B,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAU,WAEN1B,EAAQC,GACC0B,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAG1B,CAACtB,IAIGuB,EDdmBK,CAAY5B,GAA9BS,KAER,OACI,qCACI,oBAAIQ,UAAU,mCAAd,SAAmDjB,IAEjD,qBAAKiB,UAAU,iBAAf,SAEMI,EAASV,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEIA,GADEA,EAAInB,aEZrBoC,EAAe,WAExB,MAAoC9C,mBAAS,CAAC,KAA9C,mBAAO+C,EAAP,KAAmBhD,EAAnB,KAGA,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,wBAAQiD,QAAS,kBAAIjD,GAAc,SAACgD,GAAD,OChBtB,SAACA,GAElB,IAAME,EAAQC,SAASC,eAAe,SAASvC,MAC/C,MAAW,gCAARqC,OACC,EAEI,CAACA,GDU4CG,OAAjD,oBACA,6BACKL,EAAWnB,KAAI,SAAAX,GAAQ,OAAG,cAAC,EAAD,CAA0BA,SAAWA,GAAtBA,Y,YEX1DoC,IAASC,OACP,cAAC,EAAD,IACAJ,SAASC,eAAe,W","file":"static/js/main.af010996.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n//import { handleAdd } from '../helpers/handleAdd';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('Ingrese una nueva categoria')\r\n\r\n    const handleChanges = (e)=>{ \r\n        setInputValue(e.target.value);\r\n    }\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        if(inputValue.trim().length>2){\r\n        setCategories(cats=>[inputValue]);\r\n        \r\n        }\r\n        setInputValue('')\r\n        //document.getElementById('forma').blur();\r\n\r\n    }\r\n    const verInput = (e)=>{\r\n        setInputValue('')\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} onFocus={verInput}>\r\n          <input\r\n          id='forma'\r\n          type=\"text\"\r\n          value={ inputValue }\r\n          onChange={handleChanges}\r\n          autoComplete={'off'}\r\n          />  \r\n        </form>\r\n    )\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\nexport const getGifs = async( category ) => {\r\n    console.log(category)\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&api_key=4feLUPaoCa2IcV1qgjVdZDaVtqpVyd5h&limit=10`\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    \r\n    const gifs = data.map((img)=>{\r\n        return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n    //console.log(gifs);\r\n    \r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    \r\n    return (\r\n        <div className='card'>\r\n            <img \r\n            src={url} \r\n            alt={title} \r\n            className='imagen'\r\n            />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","\r\nimport React from 'react'\r\nimport { useFethGifs } from '../hooks/useFethGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n       \r\n    const { data:imagenes } = useFethGifs(category)\r\n    \r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__swing' >{category}</h3>\r\n            \r\n            { <div className='contenedorGrid' >\r\n            {\r\n                    imagenes.map( img =>(\r\n                        <GifGridItem \r\n                        key={ img.id } \r\n                        {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div> }\r\n        </>\r\n    )\r\n}\r\n\r\n","import {useEffect, useState} from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFethGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n    \r\n    useEffect(()=>{\r\n        \r\n        getGifs(category)\r\n                .then( imgs => {\r\n                    setstate({\r\n                        data: imgs,\r\n                        loading: false\r\n                    })\r\n                } )\r\n    }, [category])\r\n\r\n    \r\n\r\n    return state;\r\n}\r\n","import React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\nimport { handleAdd } from './helpers/handleAdd';\r\n\r\n\r\nexport const GifExpertApp = ()=> {\r\n    \r\n    const [categories, setCategories] = useState([''])\r\n    \r\n   \r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n\r\n            <button onClick={()=>setCategories((categories)=>handleAdd(categories))}>Buscar</button>\r\n            <ol>\r\n                {categories.map(category=> <GifGrid key={ category } category={ category }/>)   /*<li key={category}>{category}</li>) */\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n    \r\n};\r\n","\r\nexport const handleAdd = (categories) => {\r\n  \r\n        const valor = document.getElementById('forma').value;\r\n        if(valor==='Ingrese una nueva categoria'){\r\n            return\r\n        }else {\r\n        return ([valor]);\r\n        } \r\n          \r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\nimport \"animate.css\"\n\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}